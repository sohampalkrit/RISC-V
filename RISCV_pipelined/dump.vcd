$date
	Tue Mar 25 16:42:28 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module dut $end
$var wire 1 # FlushD $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 $ start $end
$var wire 32 % WriteDataM [31:0] $end
$var wire 1 & StallF $end
$var wire 1 ' StallD $end
$var wire 32 ( ResultW [31:0] $end
$var wire 1 ) ResultSrcW $end
$var wire 1 * ResultSrcM $end
$var wire 1 + ResultSrcE $end
$var wire 1 , RegWriteW $end
$var wire 1 - RegWriteM $end
$var wire 1 . RegWriteE $end
$var wire 32 / ReadDataW [31:0] $end
$var wire 5 0 RS2_E [4:0] $end
$var wire 5 1 RS2_D [4:0] $end
$var wire 5 2 RS1_E [4:0] $end
$var wire 5 3 RS1_D [4:0] $end
$var wire 5 4 RD_M [4:0] $end
$var wire 5 5 RD_E [4:0] $end
$var wire 5 6 RDW [4:0] $end
$var wire 32 7 RD2_E [31:0] $end
$var wire 32 8 RD1_E [31:0] $end
$var wire 32 9 PCTargetE [31:0] $end
$var wire 1 : PCSrcE $end
$var wire 32 ; PCPlus4W [31:0] $end
$var wire 32 < PCPlus4M [31:0] $end
$var wire 32 = PCPlus4E [31:0] $end
$var wire 32 > PCPlus4D [31:0] $end
$var wire 32 ? PCE [31:0] $end
$var wire 32 @ PCD [31:0] $end
$var wire 1 A MemWriteM $end
$var wire 1 B MemWriteE $end
$var wire 1 C JumpE $end
$var wire 32 D InstrD [31:0] $end
$var wire 32 E Imm_Ext_E [31:0] $end
$var wire 2 F ForwardBE [1:0] $end
$var wire 2 G ForwardAE [1:0] $end
$var wire 1 H FlushE $end
$var wire 1 I BranchE $end
$var wire 32 J ALU_ResultW [31:0] $end
$var wire 32 K ALU_ResultM [31:0] $end
$var wire 1 L ALUSrcE $end
$var wire 4 M ALUControlE [3:0] $end
$scope module Decode $end
$var wire 4 N ALUControlE [3:0] $end
$var wire 1 L ALUSrcE $end
$var wire 1 I BranchE $end
$var wire 1 # FlushD $end
$var wire 3 O ImmSrcD [2:0] $end
$var wire 32 P Imm_Ext_E [31:0] $end
$var wire 1 Q JumpD $end
$var wire 1 C JumpE $end
$var wire 1 B MemWriteE $end
$var wire 32 R PCE [31:0] $end
$var wire 32 S PCPlus4E [31:0] $end
$var wire 32 T RD1_E [31:0] $end
$var wire 32 U RD2_E [31:0] $end
$var wire 5 V RD_E [4:0] $end
$var wire 5 W RS1_E [4:0] $end
$var wire 5 X RS2_E [4:0] $end
$var wire 1 . RegWriteE $end
$var wire 1 + ResultSrcE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ' StallD $end
$var wire 32 Y ResultW [31:0] $end
$var wire 1 Z ResultSrcD $end
$var wire 1 , RegWriteW $end
$var wire 1 [ RegWriteD $end
$var wire 5 \ RS2_D [4:0] $end
$var wire 5 ] RS1_D [4:0] $end
$var wire 5 ^ RDW [4:0] $end
$var wire 32 _ RD2_D [31:0] $end
$var wire 32 ` RD1_D [31:0] $end
$var wire 32 a PCPlus4D [31:0] $end
$var wire 32 b PCD [31:0] $end
$var wire 1 c MemWriteD $end
$var wire 32 d InstrD [31:0] $end
$var wire 32 e Imm_Ext_D [31:0] $end
$var wire 1 f BranchD $end
$var wire 1 g ALUSrcD $end
$var wire 2 h ALUOpD [1:0] $end
$var wire 4 i ALUControlD [3:0] $end
$var reg 4 j ALUControlD_r [3:0] $end
$var reg 1 L ALUSrcD_r $end
$var reg 1 I BranchD_r $end
$var reg 32 k Imm_Ext_D_r [31:0] $end
$var reg 1 C JumpD_r $end
$var reg 1 l MemWriteD_r $end
$var reg 32 m PCD_r [31:0] $end
$var reg 32 n PCPlus4D_r [31:0] $end
$var reg 32 o RD1_D_r [31:0] $end
$var reg 32 p RD2_D_r [31:0] $end
$var reg 5 q RD_D_r [4:0] $end
$var reg 5 r RS1_D_r [4:0] $end
$var reg 5 s RS2_D_r [4:0] $end
$var reg 1 t RegWriteD_r $end
$var reg 1 u ResultSrcD_r $end
$scope module alu_control $end
$var wire 3 v funct3 [2:0] $end
$var wire 7 w funct7 [6:0] $end
$var wire 2 x ALUOp [1:0] $end
$var reg 4 y ALUCtl [3:0] $end
$upscope $end
$scope module control $end
$var wire 7 z opcode [6:0] $end
$var reg 2 { ALUOp [1:0] $end
$var reg 1 g ALUSrc $end
$var reg 3 | ImmSrc [2:0] $end
$var reg 1 f branch $end
$var reg 1 } memRead $end
$var reg 1 c memWrite $end
$var reg 1 Z memtoReg $end
$var reg 1 [ regWrite $end
$upscope $end
$scope module extension $end
$var wire 3 ~ ImmSrc [2:0] $end
$var wire 32 !" inst [31:0] $end
$var parameter 32 "" Width $end
$var reg 32 #" imm [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 $" readReg1 [4:0] $end
$var wire 5 %" readReg2 [4:0] $end
$var wire 1 " rst $end
$var wire 5 &" writeReg [4:0] $end
$var wire 32 '" writeData [31:0] $end
$var wire 1 , regWrite $end
$var wire 32 (" readData2 [31:0] $end
$var wire 32 )" readData1 [31:0] $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 4 *" ALUControlE [3:0] $end
$var wire 1 L ALUSrcE $end
$var wire 32 +" ALU_ResultM [31:0] $end
$var wire 1 I BranchE $end
$var wire 32 ," Imm_Ext_E [31:0] $end
$var wire 1 C JumpE $end
$var wire 1 B MemWriteE $end
$var wire 1 A MemWriteM $end
$var wire 32 -" PCE [31:0] $end
$var wire 32 ." PCPlus4E [31:0] $end
$var wire 32 /" PCPlus4M [31:0] $end
$var wire 1 : PCSrcE $end
$var wire 32 0" RD1_E [31:0] $end
$var wire 32 1" RD2_E [31:0] $end
$var wire 5 2" RD_E [4:0] $end
$var wire 5 3" RD_M [4:0] $end
$var wire 1 . RegWriteE $end
$var wire 1 - RegWriteM $end
$var wire 1 + ResultSrcE $end
$var wire 1 * ResultSrcM $end
$var wire 32 4" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 5" ZeroE $end
$var wire 32 6" Src_B_interim [31:0] $end
$var wire 32 7" Src_B [31:0] $end
$var wire 32 8" Src_A [31:0] $end
$var wire 32 9" ResultW [31:0] $end
$var wire 32 :" ResultE [31:0] $end
$var wire 32 ;" PCTargetE [31:0] $end
$var wire 2 <" ForwardB_E [1:0] $end
$var wire 2 =" ForwardA_E [1:0] $end
$var wire 1 H FlushE $end
$var reg 1 >" MemWriteE_r $end
$var reg 32 ?" PCPlus4E_r [31:0] $end
$var reg 32 @" RD2_E_r [31:0] $end
$var reg 5 A" RD_E_r [4:0] $end
$var reg 1 B" RegWriteE_r $end
$var reg 32 C" ResultE_r [31:0] $end
$var reg 1 D" ResultSrcE_r $end
$scope module alu $end
$var wire 4 E" ALUCtl [3:0] $end
$var wire 1 5" zero $end
$var wire 32 F" B [31:0] $end
$var wire 32 G" A [31:0] $end
$var parameter 4 H" ALU_ADD $end
$var parameter 4 I" ALU_AND $end
$var parameter 4 J" ALU_BGT $end
$var parameter 4 K" ALU_JAL $end
$var parameter 4 L" ALU_OR $end
$var parameter 4 M" ALU_SLL $end
$var parameter 4 N" ALU_SLT $end
$var parameter 4 O" ALU_SRA $end
$var parameter 4 P" ALU_SRL $end
$var parameter 4 Q" ALU_SUB $end
$var parameter 4 R" ALU_XOR $end
$var reg 32 S" ALUOut [31:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 T" s1 [31:0] $end
$var wire 1 L sel $end
$var wire 32 U" s0 [31:0] $end
$var wire 32 V" out [31:0] $end
$var parameter 32 W" size $end
$upscope $end
$scope module branch_adder $end
$var wire 32 X" a [31:0] $end
$var wire 32 Y" b [31:0] $end
$var wire 32 Z" sum [31:0] $end
$upscope $end
$scope module srca_mux $end
$var wire 32 [" s0 [31:0] $end
$var wire 32 \" s2 [31:0] $end
$var wire 2 ]" sel [1:0] $end
$var wire 32 ^" s1 [31:0] $end
$var parameter 32 _" size $end
$var reg 32 `" out [31:0] $end
$upscope $end
$scope module srcb_mux $end
$var wire 32 a" s0 [31:0] $end
$var wire 32 b" s2 [31:0] $end
$var wire 2 c" sel [1:0] $end
$var wire 32 d" s1 [31:0] $end
$var parameter 32 e" size $end
$var reg 32 f" out [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 1 : PCSrcE $end
$var wire 32 g" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 $ start $end
$var wire 32 h" next_pc [31:0] $end
$var wire 1 & StallF $end
$var wire 32 i" PC_F [31:0] $end
$var wire 32 j" PCPlus4F [31:0] $end
$var wire 32 k" PCPlus4D [31:0] $end
$var wire 32 l" PCF [31:0] $end
$var wire 32 m" PCD [31:0] $end
$var wire 32 n" InstrF [31:0] $end
$var wire 32 o" InstrD [31:0] $end
$var reg 32 p" InstrF_reg [31:0] $end
$var reg 32 q" PCF_reg [31:0] $end
$var reg 32 r" PCPlus4F_reg [31:0] $end
$scope module IMEM $end
$var wire 32 s" readAddr [31:0] $end
$var wire 32 t" inst [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 u" s1 [31:0] $end
$var wire 1 : sel $end
$var wire 32 v" s0 [31:0] $end
$var wire 32 w" out [31:0] $end
$var parameter 32 x" size $end
$upscope $end
$scope module PC_adder $end
$var wire 32 y" b [31:0] $end
$var wire 32 z" sum [31:0] $end
$var wire 32 {" a [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 1 ! clk $end
$var wire 32 |" pc_i [31:0] $end
$var wire 1 }" rst $end
$var reg 32 ~" pc_o [31:0] $end
$upscope $end
$upscope $end
$scope module ForwardingUnit $end
$var wire 5 !# RD_M [4:0] $end
$var wire 5 "# RS1_E [4:0] $end
$var wire 5 ## RS2_E [4:0] $end
$var wire 1 - RegWriteM $end
$var wire 1 , RegWriteW $end
$var wire 5 $# RD_W [4:0] $end
$var reg 2 %# ForwardA_E [1:0] $end
$var reg 2 &# ForwardB_E [1:0] $end
$upscope $end
$scope module HazardUnit $end
$var wire 5 '# RD_E [4:0] $end
$var wire 5 (# RS1_D [4:0] $end
$var wire 5 )# RS2_D [4:0] $end
$var wire 1 - RegWriteM $end
$var wire 1 + ResultSrcE $end
$var reg 1 H FlushE $end
$var reg 1 ' StallD $end
$var reg 1 & StallF $end
$upscope $end
$scope module Memory $end
$var wire 32 *# ALU_ResultM [31:0] $end
$var wire 32 +# ALU_ResultW [31:0] $end
$var wire 1 A MemWriteM $end
$var wire 32 ,# PCPlus4M [31:0] $end
$var wire 32 -# PCPlus4W [31:0] $end
$var wire 5 .# RD_M [4:0] $end
$var wire 5 /# RD_W [4:0] $end
$var wire 32 0# ReadDataW [31:0] $end
$var wire 1 - RegWriteM $end
$var wire 1 , RegWriteW $end
$var wire 1 * ResultSrcM $end
$var wire 1 ) ResultSrcW $end
$var wire 32 1# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 2# ReadDataM [31:0] $end
$var reg 32 3# ALU_ResultM_r [31:0] $end
$var reg 32 4# PCPlus4M_r [31:0] $end
$var reg 5 5# RD_M_r [4:0] $end
$var reg 32 6# ReadDataM_r [31:0] $end
$var reg 1 7# RegWriteM_r $end
$var reg 1 ) ResultSrcM_r $end
$scope module dmem $end
$var wire 32 8# address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 9# memRead $end
$var wire 1 A memWrite $end
$var wire 1 " rst $end
$var wire 32 :# writeData [31:0] $end
$var reg 32 ;# readData [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 <# ALU_ResultW [31:0] $end
$var wire 32 =# PCPlus4W [31:0] $end
$var wire 32 ># ReadDataW [31:0] $end
$var wire 1 ) ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ?# ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 @# s0 [31:0] $end
$var wire 32 A# s1 [31:0] $end
$var wire 1 ) sel $end
$var wire 32 B# out [31:0] $end
$var parameter 32 C# size $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 C#
b100000 x"
b100000 e"
b100000 _"
b100000 W"
b100 R"
b1 Q"
b110 P"
b111 O"
b1000 N"
b101 M"
b11 L"
b1010 K"
b1001 J"
b10 I"
b0 H"
b100000 ""
$end
#0
$dumpvars
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
z9#
b0 8#
07#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
bx ~"
x}"
bx |"
bx {"
bx z"
b100 y"
bx w"
bx v"
b0 u"
bx t"
bx s"
b0 r"
b0 q"
b0 p"
b0 o"
bx n"
b0 m"
bx l"
b0 k"
bx j"
bx i"
bx h"
b0 g"
b0 f"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 V"
b0 U"
b0 T"
b0 S"
b0 G"
b0 F"
b0 E"
0D"
b0 C"
0B"
b0 A"
b0 @"
b0 ?"
0>"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
15"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 !"
bz ~
0}
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
0u
0t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
0l
b0 k
b0 j
b0 i
b0 h
0g
0f
b0 e
b0 d
0c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
0[
0Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
zQ
b0 P
bz O
b0 N
b0 M
0L
b0 K
b0 J
0I
0H
b0 G
b0 F
b0 E
b0 D
0C
0B
0A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
0:
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
0.
0-
0,
0+
0*
0)
b0 (
0'
0&
b0 %
z$
z#
0"
1!
$end
#50
0!
#100
1!
#150
0!
#200
1"
1!
#250
0!
#300
bx _
bx ("
bx `
bx )"
bx %"
bx $"
bx v
bx w
bx z
bx 1
bx \
bx )#
bx 3
bx ]
bx (#
bx >
bx a
bx k"
bx @
bx b
bx m"
bx D
bx d
bx !"
bx o"
x:
bx r"
bx q"
bx p"
zC
1!
#350
0!
#400
bx 7"
bx F"
bx V"
x5"
bx :"
bx S"
bx 6"
bx U"
bx f"
bx 8"
bx G"
bx `"
bx 0
bx X
bx ##
bx s
bx 2
bx W
bx "#
bx r
bx =
bx S
bx ."
bx n
bx 9
bx ;"
bx Z"
bx g"
bx u"
bx ?
bx R
bx m
bx -"
bx X"
bx 5
bx V
bx 2"
bx '#
bx q
bx 7
bx U
bx 1"
bx a"
bx p
bx 8
bx T
bx 0"
bx ["
bx o
1!
#450
0!
#500
bx K
bx +"
bx \"
bx b"
bx *#
bx 8#
bx C"
bx %
bx 4"
bx 1#
bx :#
bx @"
bx <
bx /"
bx ,#
bx ?"
bx 4
bx 3"
bx !#
bx .#
bx A"
1!
#550
0!
#600
bx (
bx Y
bx '"
bx 9"
bx ^"
bx d"
bx ?#
bx B#
bx J
bx +#
bx 3#
bx <#
bx @#
bx ;
bx -#
bx =#
bx 4#
bx 6
bx ^
bx &"
bx $#
bx /#
bx 5#
1!
#650
0!
#700
1!
#750
0!
#800
1!
#850
0!
#900
1!
#950
0!
#1000
1!
#1050
0!
#1100
1!
#1150
0!
#1200
1!
