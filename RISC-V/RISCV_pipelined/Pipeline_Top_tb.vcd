$date
	Fri Mar 28 20:58:28 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Pipeline_Top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$var reg 1 # start $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # start $end
$var wire 32 $ WriteDataM [31:0] $end
$var wire 32 % ResultW [31:0] $end
$var wire 1 & ResultSrcW $end
$var wire 1 ' ResultSrcM $end
$var wire 1 ( ResultSrcE $end
$var wire 1 ) RegWriteW $end
$var wire 1 * RegWriteM $end
$var wire 1 + RegWriteE $end
$var wire 32 , ReadDataW [31:0] $end
$var wire 5 - RS2_E [4:0] $end
$var wire 5 . RS2_D [4:0] $end
$var wire 5 / RS1_E [4:0] $end
$var wire 5 0 RS1_D [4:0] $end
$var wire 5 1 RD_M [4:0] $end
$var wire 5 2 RD_E [4:0] $end
$var wire 5 3 RDW [4:0] $end
$var wire 32 4 RD2_E [31:0] $end
$var wire 32 5 RD1_E [31:0] $end
$var wire 32 6 PCTargetE [31:0] $end
$var wire 1 7 PCSrcE $end
$var wire 32 8 PCPlus4W [31:0] $end
$var wire 32 9 PCPlus4M [31:0] $end
$var wire 32 : PCPlus4E [31:0] $end
$var wire 32 ; PCPlus4D [31:0] $end
$var wire 32 < PCE [31:0] $end
$var wire 32 = PCD [31:0] $end
$var wire 1 > MemWriteM $end
$var wire 1 ? MemWriteE $end
$var wire 1 @ JumpE $end
$var wire 32 A InstrD [31:0] $end
$var wire 32 B Imm_Ext_E [31:0] $end
$var wire 1 C BranchE $end
$var wire 32 D ALU_ResultW [31:0] $end
$var wire 32 E ALU_ResultM [31:0] $end
$var wire 1 F ALUSrcE $end
$var wire 4 G ALUControlE [3:0] $end
$scope module Decode $end
$var wire 4 H ALUControlE [3:0] $end
$var wire 1 F ALUSrcE $end
$var wire 1 C BranchE $end
$var wire 32 I Imm_Ext_E [31:0] $end
$var wire 1 @ JumpE $end
$var wire 1 ? MemWriteE $end
$var wire 32 J PCE [31:0] $end
$var wire 32 K PCPlus4E [31:0] $end
$var wire 32 L RD1_E [31:0] $end
$var wire 32 M RD2_E [31:0] $end
$var wire 5 N RD_E [4:0] $end
$var wire 5 O RS1_E [4:0] $end
$var wire 5 P RS2_E [4:0] $end
$var wire 1 + RegWriteE $end
$var wire 1 ( ResultSrcE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 Q ResultW [31:0] $end
$var wire 1 R ResultSrcD $end
$var wire 1 ) RegWriteW $end
$var wire 1 S RegWriteD $end
$var wire 5 T RS2_D [4:0] $end
$var wire 5 U RS1_D [4:0] $end
$var wire 5 V RDW [4:0] $end
$var wire 32 W RD2_D [31:0] $end
$var wire 32 X RD1_D [31:0] $end
$var wire 32 Y PCPlus4D [31:0] $end
$var wire 32 Z PCD [31:0] $end
$var wire 1 [ MemWriteD $end
$var wire 1 \ JumpD $end
$var wire 32 ] InstrD [31:0] $end
$var wire 32 ^ Imm_Ext_D [31:0] $end
$var wire 1 _ BranchD $end
$var wire 1 ` ALUSrcD $end
$var wire 2 a ALUOpD [1:0] $end
$var wire 4 b ALUControlD [3:0] $end
$var reg 4 c ALUControlD_r [3:0] $end
$var reg 1 F ALUSrcD_r $end
$var reg 1 C BranchD_r $end
$var reg 32 d Imm_Ext_D_r [31:0] $end
$var reg 1 @ JumpD_r $end
$var reg 1 e MemWriteD_r $end
$var reg 32 f PCD_r [31:0] $end
$var reg 32 g PCPlus4D_r [31:0] $end
$var reg 32 h RD1_D_r [31:0] $end
$var reg 32 i RD2_D_r [31:0] $end
$var reg 5 j RD_D_r [4:0] $end
$var reg 5 k RS1_D_r [4:0] $end
$var reg 5 l RS2_D_r [4:0] $end
$var reg 1 m RegWriteD_r $end
$var reg 1 n ResultSrcD_r $end
$scope module alu_control $end
$var wire 3 o funct3 [2:0] $end
$var wire 7 p funct7 [6:0] $end
$var wire 2 q ALUOp [1:0] $end
$var reg 4 r ALUControl [3:0] $end
$upscope $end
$scope module control $end
$var wire 7 s opcode [6:0] $end
$var reg 2 t ALUOp [1:0] $end
$var reg 1 ` ALUSrc $end
$var reg 1 _ branch $end
$var reg 1 \ jump $end
$var reg 1 u memRead $end
$var reg 1 [ memWrite $end
$var reg 1 R memtoReg $end
$var reg 1 S regWrite $end
$upscope $end
$scope module extension $end
$var wire 7 v opcode [6:0] $end
$var wire 32 w In [31:0] $end
$var reg 32 x Imm_Ext [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 ! clk $end
$var wire 5 y readReg1 [4:0] $end
$var wire 5 z readReg2 [4:0] $end
$var wire 1 " rst $end
$var wire 5 { writeReg [4:0] $end
$var wire 32 | writeData [31:0] $end
$var wire 1 ) regWrite $end
$var wire 32 } readData2 [31:0] $end
$var wire 32 ~ readData1 [31:0] $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 4 !" ALUControlE [3:0] $end
$var wire 1 F ALUSrcE $end
$var wire 32 "" ALU_ResultM [31:0] $end
$var wire 1 C BranchE $end
$var wire 32 #" Imm_Ext_E [31:0] $end
$var wire 1 @ JumpE $end
$var wire 1 ? MemWriteE $end
$var wire 1 > MemWriteM $end
$var wire 32 $" PCE [31:0] $end
$var wire 32 %" PCPlus4E [31:0] $end
$var wire 32 &" PCPlus4M [31:0] $end
$var wire 1 7 PCSrcE $end
$var wire 32 '" RD1_E [31:0] $end
$var wire 32 (" RD2_E [31:0] $end
$var wire 5 )" RD_E [4:0] $end
$var wire 5 *" RD_M [4:0] $end
$var wire 1 + RegWriteE $end
$var wire 1 * RegWriteM $end
$var wire 1 ( ResultSrcE $end
$var wire 1 ' ResultSrcM $end
$var wire 32 +" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ," ZeroE $end
$var wire 32 -" Src_B [31:0] $end
$var wire 32 ." PCTargetE [31:0] $end
$var wire 32 /" ALU_Result [31:0] $end
$var reg 32 0" ALU_ResultM_r [31:0] $end
$var reg 1 1" MemWriteM_r $end
$var reg 32 2" PCPlus4M_r [31:0] $end
$var reg 5 3" RD_M_r [4:0] $end
$var reg 1 4" RegWriteM_r $end
$var reg 1 5" ResultSrcM_r $end
$var reg 32 6" WriteDataM_r [31:0] $end
$scope module alu $end
$var wire 32 7" A [31:0] $end
$var wire 4 8" ALUControl [3:0] $end
$var wire 1 ," Zero $end
$var wire 32 9" B [31:0] $end
$var reg 32 :" Result [31:0] $end
$var integer 32 ;" i [31:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 <" s0 [31:0] $end
$var wire 32 =" s1 [31:0] $end
$var wire 1 F sel $end
$var wire 32 >" out [31:0] $end
$var parameter 32 ?" size $end
$upscope $end
$scope module branch_adder $end
$var wire 32 @" a [31:0] $end
$var wire 32 A" b [31:0] $end
$var wire 32 B" sum [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 1 7 PCSrcE $end
$var wire 32 C" PCTargetE [31:0] $end
$var wire 1 D" StallF $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 E" start $end
$var wire 32 F" PC_F [31:0] $end
$var wire 32 G" PCPlus4F [31:0] $end
$var wire 32 H" PCPlus4D [31:0] $end
$var wire 32 I" PCF [31:0] $end
$var wire 32 J" PCD [31:0] $end
$var wire 32 K" InstrF [31:0] $end
$var wire 32 L" InstrD [31:0] $end
$var reg 32 M" InstrF_reg [31:0] $end
$var reg 32 N" PCF_reg [31:0] $end
$var reg 32 O" PCPlus4F_reg [31:0] $end
$scope module IMEM $end
$var wire 32 P" readAddr [31:0] $end
$var wire 32 Q" inst [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 R" s1 [31:0] $end
$var wire 1 7 sel $end
$var wire 32 S" s0 [31:0] $end
$var wire 32 T" out [31:0] $end
$var parameter 32 U" size $end
$upscope $end
$scope module PC_adder $end
$var wire 32 V" b [31:0] $end
$var wire 32 W" sum [31:0] $end
$var wire 32 X" a [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 1 ! clk $end
$var wire 32 Y" pc_i [31:0] $end
$var wire 1 Z" rst $end
$var reg 32 [" pc_o [31:0] $end
$upscope $end
$upscope $end
$scope module Memory $end
$var wire 32 \" ALU_ResultM [31:0] $end
$var wire 32 ]" ALU_ResultW [31:0] $end
$var wire 1 > MemWriteM $end
$var wire 32 ^" PCPlus4M [31:0] $end
$var wire 32 _" PCPlus4W [31:0] $end
$var wire 5 `" RD_M [4:0] $end
$var wire 5 a" RD_W [4:0] $end
$var wire 32 b" ReadDataW [31:0] $end
$var wire 1 * RegWriteM $end
$var wire 1 ) RegWriteW $end
$var wire 1 ' ResultSrcM $end
$var wire 1 & ResultSrcW $end
$var wire 32 c" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 d" ReadDataM [31:0] $end
$var reg 32 e" ALU_ResultM_r [31:0] $end
$var reg 32 f" PCPlus4M_r [31:0] $end
$var reg 5 g" RD_M_r [4:0] $end
$var reg 32 h" ReadDataM_r [31:0] $end
$var reg 1 i" RegWriteM_r $end
$var reg 1 & ResultSrcM_r $end
$scope module dmem $end
$var wire 32 j" address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 k" memRead $end
$var wire 1 > memWrite $end
$var wire 1 " rst $end
$var wire 32 l" writeData [31:0] $end
$var reg 32 m" readData [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 n" ALU_ResultW [31:0] $end
$var wire 32 o" PCPlus4W [31:0] $end
$var wire 32 p" ReadDataW [31:0] $end
$var wire 1 & ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 q" ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 r" s0 [31:0] $end
$var wire 32 s" s1 [31:0] $end
$var wire 1 & sel $end
$var wire 32 t" out [31:0] $end
$var parameter 32 u" size $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 u"
b100000 U"
b100000 ?"
$end
#0
$dumpvars
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
b0 m"
bx l"
zk"
bx j"
xi"
bx h"
bx g"
bx f"
bx e"
b0 d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
xZ"
bx Y"
bx X"
bx W"
b100 V"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
zE"
zD"
bx C"
bx B"
bx A"
bx @"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
x5"
x4"
bx 3"
bx 2"
x1"
bx 0"
bx /"
bx ."
bx -"
x,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
xu
bx t
bx s
bx r
bx q
bx p
bx o
xn
xm
bx l
bx k
bx j
bx i
bx h
bx g
bx f
xe
bx d
bx c
bx b
bx a
x`
x_
bx ^
bx ]
x\
x[
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
xS
xR
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
xF
bx E
bx D
xC
bx B
bx A
x@
x?
x>
bx =
bx <
bx ;
bx :
bx 9
bx 8
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
x*
x)
x(
x'
x&
bx %
bx $
0#
1"
0!
$end
#10000
b0 ,
b0 b"
b0 h"
b0 p"
b0 s"
1!
#20000
b0 %
b0 Q
b0 |
b0 q"
b0 t"
1,"
b0 /"
b0 :"
07
b0 -"
b0 9"
b0 >"
b0 D
b0 ]"
b0 e"
b0 n"
b0 r"
b0 8
b0 _"
b0 o"
b0 f"
b0 3
b0 V
b0 {
b0 a"
b0 g"
0&
0)
0i"
b0 E
b0 ""
b0 \"
b0 j"
b0 0"
b0 $
b0 +"
b0 c"
b0 l"
b0 6"
b0 9
b0 &"
b0 ^"
b0 2"
b0 1
b0 *"
b0 `"
b0 3"
0'
05"
0>
01"
0*
04"
b0 -
b0 P
b0 l
b0 /
b0 O
b0 k
b0 :
b0 K
b0 %"
b0 g
b0 6
b0 ."
b0 B"
b0 C"
b0 R"
b0 <
b0 J
b0 f
b0 $"
b0 @"
b0 2
b0 N
b0 )"
b0 j
b0 B
b0 I
b0 d
b0 #"
b0 ="
b0 A"
b0 4
b0 M
b0 i
b0 ("
b0 <"
b0 5
b0 L
b0 '"
b0 7"
b0 h
b0 G
b0 H
b0 !"
b0 8"
b0 c
0@
0C
0(
0n
0?
0e
0F
0+
0m
b0 O"
b0 N"
b0 M"
b0 W
b0 }
b0 X
b0 ~
b10 b
b10 r
0\
0S
0`
0[
b0 a
b0 q
b0 t
0R
0u
0_
b0 v
b0 z
b0 y
b0 o
b0 p
b0 s
b0 .
b0 T
b0 0
b0 U
b0 ^
b0 x
b0 A
b0 ]
b0 w
b0 L"
b0 =
b0 Z
b0 J"
b0 ;
b0 Y
b0 H"
0!
0"
#30000
1!
#40000
0!
1"
#50000
bx W
bx }
bx X
bx ~
bx v
bx z
bx y
bx o
bx p
bx s
bx .
bx T
bx 0
bx U
bx ;
bx Y
bx H"
bx =
bx Z
bx J"
bx A
bx ]
bx w
bx L"
b10 G
b10 H
b10 !"
b10 8"
b10 c
bx O"
bx N"
bx M"
1!
#60000
b0 O"
b0 N"
b0 M"
b0 G
b0 H
b0 !"
b0 8"
b0 c
b0 W
b0 }
b0 X
b0 ~
b0 v
b0 z
b0 y
b0 o
b0 p
b0 s
b0 .
b0 T
b0 0
b0 U
b0 A
b0 ]
b0 w
b0 L"
b0 =
b0 Z
b0 J"
b0 ;
b0 Y
b0 H"
0!
0"
#70000
1!
#80000
0!
#90000
1!
#100000
0!
1#
#110000
1!
#120000
0!
#130000
1!
#140000
0!
#150000
1!
#160000
0!
#170000
1!
#180000
0!
#190000
1!
#200000
0!
#210000
1!
#220000
0!
#230000
1!
#240000
0!
#250000
1!
#260000
0!
#270000
1!
#280000
0!
#290000
1!
#300000
0!
#310000
1!
#320000
0!
#330000
1!
#340000
0!
#350000
1!
#360000
0!
#370000
1!
#380000
0!
#390000
1!
#400000
0!
#410000
1!
#420000
0!
#430000
1!
#440000
0!
#450000
1!
#460000
0!
#470000
1!
#480000
0!
#490000
1!
#500000
0!
#510000
1!
#520000
0!
#530000
1!
#540000
0!
#550000
1!
#560000
0!
#570000
1!
#580000
0!
#590000
1!
#600000
0!
#610000
1!
#620000
0!
#630000
1!
#640000
0!
#650000
1!
#660000
0!
#670000
1!
#680000
0!
#690000
1!
#700000
0!
#710000
1!
#720000
0!
#730000
1!
#740000
0!
#750000
1!
#760000
0!
#770000
1!
#780000
0!
#790000
1!
#800000
0!
#810000
1!
#820000
0!
#830000
1!
#840000
0!
#850000
1!
#860000
0!
#870000
1!
#880000
0!
#890000
1!
#900000
0!
#910000
1!
#920000
0!
#930000
1!
#940000
0!
#950000
1!
#960000
0!
#970000
1!
#980000
0!
#990000
1!
#1000000
0!
#1010000
1!
#1020000
0!
#1030000
1!
#1040000
0!
#1050000
1!
#1060000
0!
#1070000
1!
#1080000
0!
#1090000
1!
#1100000
0!
#1110000
1!
#1120000
0!
#1130000
1!
#1140000
0!
#1150000
1!
#1160000
0!
#1170000
1!
#1180000
0!
#1190000
1!
#1200000
0!
#1210000
1!
#1220000
0!
#1230000
1!
#1240000
0!
#1250000
1!
#1260000
0!
#1270000
1!
#1280000
0!
#1290000
1!
#1300000
0!
#1310000
1!
#1320000
0!
#1330000
1!
#1340000
0!
#1350000
1!
#1360000
0!
#1370000
1!
#1380000
0!
#1390000
1!
#1400000
0!
#1410000
1!
#1420000
0!
#1430000
1!
#1440000
0!
#1450000
1!
#1460000
0!
#1470000
1!
#1480000
0!
#1490000
1!
#1500000
0!
#1510000
1!
#1520000
0!
#1530000
1!
#1540000
0!
#1550000
1!
#1560000
0!
#1570000
1!
#1580000
0!
#1590000
1!
#1600000
0!
#1610000
1!
#1620000
0!
#1630000
1!
#1640000
0!
#1650000
1!
#1660000
0!
#1670000
1!
#1680000
0!
#1690000
1!
#1700000
0!
#1710000
1!
#1720000
0!
#1730000
1!
#1740000
0!
#1750000
1!
#1760000
0!
#1770000
1!
#1780000
0!
#1790000
1!
#1800000
0!
#1810000
1!
#1820000
0!
#1830000
1!
#1840000
0!
#1850000
1!
#1860000
0!
#1870000
1!
#1880000
0!
#1890000
1!
#1900000
0!
#1910000
1!
#1920000
0!
#1930000
1!
#1940000
0!
#1950000
1!
#1960000
0!
#1970000
1!
#1980000
0!
#1990000
1!
#2000000
0!
#2010000
1!
#2020000
0!
#2030000
1!
#2040000
0!
#2050000
1!
#2060000
0!
#2070000
1!
#2080000
0!
#2090000
1!
#2100000
0!
