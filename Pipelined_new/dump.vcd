$date
	Sat Mar 29 00:25:21 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 & ResultSrcM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RS2_E [4:0] $end
$var wire 5 - RS1_E [4:0] $end
$var wire 5 . RD_M [4:0] $end
$var wire 5 / RD_E [4:0] $end
$var wire 5 0 RDW [4:0] $end
$var wire 32 1 RD2_E [31:0] $end
$var wire 32 2 RD1_E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 5 PCPlus4W [31:0] $end
$var wire 32 6 PCPlus4M [31:0] $end
$var wire 32 7 PCPlus4E [31:0] $end
$var wire 32 8 PCPlus4D [31:0] $end
$var wire 32 9 PCE [31:0] $end
$var wire 32 : PCD [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 1 < MemWriteE $end
$var wire 32 = InstrD [31:0] $end
$var wire 32 > Imm_Ext_E [31:0] $end
$var wire 2 ? ForwardBE [1:0] $end
$var wire 2 @ ForwardAE [1:0] $end
$var wire 1 A BranchE $end
$var wire 32 B ALU_ResultW [31:0] $end
$var wire 32 C ALU_ResultM [31:0] $end
$var wire 1 D ALUSrcE $end
$var wire 4 E ALUControlE [3:0] $end
$scope module Decode $end
$var wire 4 F ALUControlE [3:0] $end
$var wire 1 D ALUSrcE $end
$var wire 1 A BranchE $end
$var wire 32 G Imm_Ext_E [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 32 H PCE [31:0] $end
$var wire 32 I PCPlus4E [31:0] $end
$var wire 32 J RD1_E [31:0] $end
$var wire 32 K RD2_E [31:0] $end
$var wire 5 L RD_E [4:0] $end
$var wire 5 M RS1_E [4:0] $end
$var wire 5 N RS2_E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 O ResultW [31:0] $end
$var wire 1 P ResultSrcD $end
$var wire 1 ( RegWriteW $end
$var wire 1 Q RegWriteD $end
$var wire 5 R RDW [4:0] $end
$var wire 32 S RD2_D [31:0] $end
$var wire 32 T RD1_D [31:0] $end
$var wire 32 U PCPlus4D [31:0] $end
$var wire 32 V PCD [31:0] $end
$var wire 1 W MemWriteD $end
$var wire 32 X InstrD [31:0] $end
$var wire 32 Y Imm_Ext_D [31:0] $end
$var wire 2 Z ImmSrcD [1:0] $end
$var wire 1 [ BranchD $end
$var wire 1 \ ALUSrcD $end
$var wire 4 ] ALUControlD [3:0] $end
$var reg 4 ^ ALUControlD_r [3:0] $end
$var reg 1 D ALUSrcD_r $end
$var reg 1 A BranchD_r $end
$var reg 32 _ Imm_Ext_D_r [31:0] $end
$var reg 1 ` MemWriteD_r $end
$var reg 32 a PCD_r [31:0] $end
$var reg 32 b PCPlus4D_r [31:0] $end
$var reg 32 c RD1_D_r [31:0] $end
$var reg 32 d RD2_D_r [31:0] $end
$var reg 5 e RD_D_r [4:0] $end
$var reg 5 f RS1_D_r [4:0] $end
$var reg 5 g RS2_D_r [4:0] $end
$var reg 1 h RegWriteD_r $end
$var reg 1 i ResultSrcD_r $end
$scope module control $end
$var wire 7 j Op [6:0] $end
$var wire 3 k funct3 [2:0] $end
$var wire 7 l funct7 [6:0] $end
$var wire 1 P ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 W MemWrite $end
$var wire 2 m ImmSrc [1:0] $end
$var wire 1 [ Branch $end
$var wire 1 \ ALUSrc $end
$var wire 2 n ALUOp [1:0] $end
$var wire 4 o ALUControl [3:0] $end
$scope module ALU_Decoder $end
$var wire 3 p funct3 [2:0] $end
$var wire 7 q funct7 [6:0] $end
$var wire 7 r op [6:0] $end
$var wire 2 s ALUOp [1:0] $end
$var wire 4 t ALUControl [3:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 u Op [6:0] $end
$var wire 1 P ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 W MemWrite $end
$var wire 2 v ImmSrc [1:0] $end
$var wire 1 [ Branch $end
$var wire 1 \ ALUSrc $end
$var wire 2 w ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module extension $end
$var wire 2 x ImmSrc [1:0] $end
$var wire 32 y In [31:0] $end
$var wire 32 z Imm_Ext [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 { A1 [4:0] $end
$var wire 5 | A2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ( WE3 $end
$var wire 32 } WD3 [31:0] $end
$var wire 32 ~ RD2 [31:0] $end
$var wire 32 !" RD1 [31:0] $end
$var wire 5 "" A3 [4:0] $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 4 #" ALUControlE [3:0] $end
$var wire 1 D ALUSrcE $end
$var wire 1 A BranchE $end
$var wire 32 $" Imm_Ext_E [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 1 ; MemWriteM $end
$var wire 32 %" PCE [31:0] $end
$var wire 32 &" PCPlus4E [31:0] $end
$var wire 32 '" PCPlus4M [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 (" RD1_E [31:0] $end
$var wire 32 )" RD2_E [31:0] $end
$var wire 5 *" RD_E [4:0] $end
$var wire 5 +" RD_M [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ) RegWriteM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 & ResultSrcM $end
$var wire 32 ," WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 -" ZeroE $end
$var wire 32 ." Src_B_interim [31:0] $end
$var wire 32 /" Src_B [31:0] $end
$var wire 32 0" Src_A [31:0] $end
$var wire 32 1" ResultW [31:0] $end
$var wire 32 2" ResultE [31:0] $end
$var wire 32 3" PCTargetE [31:0] $end
$var wire 2 4" ForwardB_E [1:0] $end
$var wire 2 5" ForwardA_E [1:0] $end
$var wire 32 6" ALU_ResultM [31:0] $end
$var reg 1 7" MemWriteE_r $end
$var reg 32 8" PCPlus4E_r [31:0] $end
$var reg 32 9" RD2_E_r [31:0] $end
$var reg 5 :" RD_E_r [4:0] $end
$var reg 1 ) RegWriteE_r $end
$var reg 32 ;" ResultE_r [31:0] $end
$var reg 1 <" ResultSrcE_r $end
$scope module alu $end
$var wire 4 =" ALUControl [3:0] $end
$var wire 1 >" clk $end
$var wire 1 ?" rst $end
$var wire 32 @" B [31:0] $end
$var wire 32 A" A [31:0] $end
$var reg 4 B" ALUControl_reg [3:0] $end
$var reg 32 C" A_reg [31:0] $end
$var reg 32 D" B_reg [31:0] $end
$var reg 1 E" Carry $end
$var reg 1 F" Carry_reg $end
$var reg 1 G" Negative $end
$var reg 1 H" Negative_reg $end
$var reg 1 I" OverFlow $end
$var reg 1 J" OverFlow_reg $end
$var reg 32 K" Result [31:0] $end
$var reg 32 L" Result_reg [31:0] $end
$var reg 1 -" Zero $end
$var reg 1 M" Zero_reg $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 N" b [31:0] $end
$var wire 1 D s $end
$var wire 32 O" c [31:0] $end
$var wire 32 P" a [31:0] $end
$upscope $end
$scope module branch_adder $end
$var wire 32 Q" a [31:0] $end
$var wire 32 R" b [31:0] $end
$var wire 32 S" c [31:0] $end
$upscope $end
$scope module srca_mux $end
$var wire 32 T" a [31:0] $end
$var wire 32 U" c [31:0] $end
$var wire 2 V" s [1:0] $end
$var wire 32 W" d [31:0] $end
$var wire 32 X" b [31:0] $end
$upscope $end
$scope module srcb_mux $end
$var wire 32 Y" a [31:0] $end
$var wire 32 Z" c [31:0] $end
$var wire 2 [" s [1:0] $end
$var wire 32 \" d [31:0] $end
$var wire 32 ]" b [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 1 4 PCSrcE $end
$var wire 32 ^" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 _" PC_F [31:0] $end
$var wire 32 `" PCPlus4F [31:0] $end
$var wire 32 a" PCPlus4D [31:0] $end
$var wire 32 b" PCF [31:0] $end
$var wire 32 c" PCD [31:0] $end
$var wire 32 d" InstrF [31:0] $end
$var wire 32 e" InstrD [31:0] $end
$var reg 32 f" InstrF_reg [31:0] $end
$var reg 32 g" PCF_reg [31:0] $end
$var reg 32 h" PCPlus4F_reg [31:0] $end
$scope module IMEM $end
$var wire 1 " rst $end
$var wire 32 i" RD [31:0] $end
$var wire 32 j" A [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 k" b [31:0] $end
$var wire 1 4 s $end
$var wire 32 l" c [31:0] $end
$var wire 32 m" a [31:0] $end
$upscope $end
$scope module PC_adder $end
$var wire 32 n" b [31:0] $end
$var wire 32 o" c [31:0] $end
$var wire 32 p" a [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 32 q" PC_Next [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 r" PC [31:0] $end
$upscope $end
$upscope $end
$scope module Forwarding_block $end
$var wire 5 s" RD_M [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 5 t" Rs1_E [4:0] $end
$var wire 5 u" Rs2_E [4:0] $end
$var wire 1 " rst $end
$var wire 1 ( RegWriteW $end
$var wire 5 v" RD_W [4:0] $end
$var wire 2 w" ForwardBE [1:0] $end
$var wire 2 x" ForwardAE [1:0] $end
$upscope $end
$scope module Memory $end
$var wire 32 y" ALU_ResultM [31:0] $end
$var wire 32 z" ALU_ResultW [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 32 {" PCPlus4M [31:0] $end
$var wire 32 |" PCPlus4W [31:0] $end
$var wire 5 }" RD_M [4:0] $end
$var wire 5 ~" RD_W [4:0] $end
$var wire 32 !# ReadDataW [31:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 1 & ResultSrcM $end
$var wire 1 % ResultSrcW $end
$var wire 32 "# WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ## ReadDataM [31:0] $end
$var reg 32 $# ALU_ResultM_r [31:0] $end
$var reg 32 %# PCPlus4M_r [31:0] $end
$var reg 5 &# RD_M_r [4:0] $end
$var reg 32 '# ReadDataM_r [31:0] $end
$var reg 1 ( RegWriteM_r $end
$var reg 1 % ResultSrcM_r $end
$scope module dmem $end
$var wire 32 (# A [31:0] $end
$var wire 32 )# WD [31:0] $end
$var wire 1 ; WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 *# A_reg [31:0] $end
$var reg 32 +# RD [31:0] $end
$var reg 32 ,# RD_reg [31:0] $end
$var reg 32 -# WD_reg [31:0] $end
$var reg 1 .# WE_reg $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 /# ALU_ResultW [31:0] $end
$var wire 32 0# PCPlus4W [31:0] $end
$var wire 32 1# ReadDataW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 2# ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 3# a [31:0] $end
$var wire 32 4# b [31:0] $end
$var wire 1 % s $end
$var wire 32 5# c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
x.#
bx -#
bx ,#
bx +#
bx *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
bx ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
bx r"
bx q"
bx p"
bx o"
b100 n"
bx m"
bx l"
b0 k"
bx j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
bx b"
b0 a"
bx `"
bx _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
xM"
bx L"
bx K"
xJ"
xI"
xH"
xG"
xF"
xE"
bx D"
bx C"
bx B"
b0 A"
b0 @"
z?"
z>"
b0 ="
0<"
b0 ;"
b0 :"
b0 9"
b0 8"
07"
b0 6"
b0 5"
b0 4"
b0 3"
bx 2"
b0 1"
b0 0"
b0 /"
b0 ."
x-"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
0i
0h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
0`
b0 _
b0 ^
b0 ]
0\
0[
b0 Z
b0 Y
b0 X
0W
b0 V
b0 U
b0 T
b0 S
b0 R
0Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
0D
b0 C
b0 B
0A
b0 @
b0 ?
b0 >
b0 =
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
0'
0&
0%
b0 $
b0 #
0"
1!
$end
#50
0!
#100
b100 _"
b100 l"
b100 q"
b100 `"
b100 m"
b100 o"
b0 b"
b0 j"
b0 p"
b0 r"
0.#
b0 -#
b0 *#
1!
#150
0!
#200
b0 ##
b0 +#
b10100000000000010010011 d"
b10100000000000010010011 i"
b0 ,#
1"
1!
#250
0!
#300
1Q
1\
b101 Y
b101 z
bx S
bx ~
bx d"
bx i"
b101 |
b10011 j
b10011 r
b10011 u
b1000 _"
b1000 l"
b1000 q"
b100 8
b100 U
b100 a"
b10100000000000010010011 =
b10100000000000010010011 X
b10100000000000010010011 y
b10100000000000010010011 e"
b1000 `"
b1000 m"
b1000 o"
b100 b"
b100 j"
b100 p"
b100 r"
b100 h"
b10100000000000010010011 f"
bx C
bx 6"
bx ;"
bx U"
bx Z"
bx y"
bx (#
1!
#350
0!
#400
bx ]
bx o
bx t
xQ
x\
bx Y
bx z
bx T
bx !"
bx Z
bx m
bx v
bx x
xW
xP
x[
bx n
bx s
bx w
b101 /"
b101 @"
b101 O"
bx |
bx {
bx l
bx q
bx k
bx p
bx j
bx r
bx u
b1100 _"
b1100 l"
b1100 q"
bx $
bx O
bx }
bx 1"
bx X"
bx ]"
bx 2#
bx 5#
bx ."
bx P"
bx \"
b1000 8
b1000 U
b1000 a"
b100 :
b100 V
b100 c"
bx =
bx X
bx y
bx e"
b1100 `"
b1100 m"
b1100 o"
b1000 b"
b1000 j"
b1000 p"
b1000 r"
bx B
bx z"
bx $#
bx /#
bx 3#
b101 ,
b101 N
b101 g
b101 u"
b100 7
b100 I
b100 &"
b100 b
b1 /
b1 L
b1 *"
b1 e
b101 3
b101 3"
b101 S"
b101 ^"
b101 k"
b101 >
b101 G
b101 _
b101 $"
b101 N"
b101 R"
bx 1
bx K
bx d
bx )"
bx Y"
1D
1*
1h
b1000 h"
b100 g"
bx f"
1!
#450
0!
#500
bx0 @
bx0 5"
bx0 V"
bx0 x"
bx0 ?
bx0 4"
bx0 ["
bx0 w"
bx _"
bx l"
bx q"
b1100 8
b1100 U
b1100 a"
b1000 :
b1000 V
b1000 c"
bx /"
bx @"
bx O"
bx 0"
bx A"
bx W"
x4
b10000 `"
b10000 m"
b10000 o"
b1100 b"
b1100 j"
b1100 p"
b1100 r"
b1100 h"
b1000 g"
bx ,
bx N
bx g
bx u"
bx -
bx M
bx f
bx t"
b1000 7
b1000 I
b1000 &"
b1000 b
b100 9
b100 H
b100 a
b100 %"
b100 Q"
bx /
bx L
bx *"
bx e
bx 3
bx 3"
bx S"
bx ^"
bx k"
bx >
bx G
bx _
bx $"
bx N"
bx R"
bx 2
bx J
bx c
bx ("
bx T"
bx E
bx F
bx #"
bx ="
bx ^
xA
x'
xi
x<
x`
xD
x*
xh
bx #
bx ,"
bx "#
bx )#
bx 9"
b100 6
b100 '"
b100 {"
b100 8"
b1 .
b1 +"
b1 :"
b1 s"
b1 }"
1)
1!
#550
0!
#600
bx ?
bx 4"
bx ["
bx w"
bx @
bx 5"
bx V"
bx x"
b10000 8
b10000 U
b10000 a"
b1100 :
b1100 V
b1100 c"
bx `"
bx m"
bx o"
bx b"
bx j"
bx p"
bx r"
b100 5
b100 |"
b100 0#
b100 %#
b1 0
b1 R
b1 ""
b1 v"
b1 ~"
b1 &#
1(
b1000 6
b1000 '"
b1000 {"
b1000 8"
bx .
bx +"
bx :"
bx s"
bx }"
x&
x<"
x;
x7"
x)
b1100 7
b1100 I
b1100 &"
b1100 b
b1000 9
b1000 H
b1000 a
b1000 %"
b1000 Q"
b10000 h"
b1100 g"
1!
#650
0!
#700
bx 8
bx U
bx a"
bx :
bx V
bx c"
bx h"
bx g"
b10000 7
b10000 I
b10000 &"
b10000 b
b1100 9
b1100 H
b1100 a
b1100 %"
b1100 Q"
b1100 6
b1100 '"
b1100 {"
b1100 8"
b1000 5
b1000 |"
b1000 0#
b1000 %#
bx 0
bx R
bx ""
bx v"
bx ~"
bx &#
x%
x(
1!
#750
0!
#800
b1100 5
b1100 |"
b1100 0#
b1100 %#
b10000 6
b10000 '"
b10000 {"
b10000 8"
bx 7
bx I
bx &"
bx b
bx 9
bx H
bx a
bx %"
bx Q"
1!
#850
0!
#900
bx 6
bx '"
bx {"
bx 8"
b10000 5
b10000 |"
b10000 0#
b10000 %#
1!
#950
0!
#1000
bx 5
bx |"
bx 0#
bx %#
1!
#1050
0!
#1100
1!
#1150
0!
#1200
1!
