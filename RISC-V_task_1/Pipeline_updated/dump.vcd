$date
	Sun Mar 30 23:46:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module PC_Module $end
$var wire 32 ! PC_Next [31:0] $end
$var wire 1 " clk $end
$var wire 1 # rst $end
$var reg 32 $ PC [31:0] $end
$upscope $end
$scope module tb $end
$var reg 1 % clk $end
$var reg 1 & rst $end
$scope module dut $end
$var wire 32 ' PredictedPCE [31:0] $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 32 ( WriteDataM [31:0] $end
$var wire 32 ) ResultW [31:0] $end
$var wire 1 * ResultSrcW $end
$var wire 1 + ResultSrcM $end
$var wire 1 , ResultSrcE $end
$var wire 1 - RegWriteW $end
$var wire 1 . RegWriteM $end
$var wire 1 / RegWriteE $end
$var wire 32 0 ReadDataW [31:0] $end
$var wire 5 1 RS2_E [4:0] $end
$var wire 5 2 RS1_E [4:0] $end
$var wire 5 3 RD_M [4:0] $end
$var wire 5 4 RD_E [4:0] $end
$var wire 5 5 RDW [4:0] $end
$var wire 32 6 RD2_E [31:0] $end
$var wire 32 7 RD1_E [31:0] $end
$var wire 1 8 Prediction $end
$var wire 32 9 PCTargetE [31:0] $end
$var wire 1 : PCSrcE $end
$var wire 32 ; PCPlus4W [31:0] $end
$var wire 32 < PCPlus4M [31:0] $end
$var wire 32 = PCPlus4E [31:0] $end
$var wire 32 > PCPlus4D [31:0] $end
$var wire 32 ? PCE [31:0] $end
$var wire 32 @ PCD [31:0] $end
$var wire 1 A MemWriteM $end
$var wire 1 B MemWriteE $end
$var wire 32 C InstrD [31:0] $end
$var wire 32 D Imm_Ext_E [31:0] $end
$var wire 2 E ForwardBE [1:0] $end
$var wire 2 F ForwardAE [1:0] $end
$var wire 1 G FlushE $end
$var wire 1 H BranchE $end
$var wire 32 I ALU_ResultW [31:0] $end
$var wire 32 J ALU_ResultM [31:0] $end
$var wire 1 K ALUSrcE $end
$var wire 4 L ALUControlE [3:0] $end
$scope module Decode $end
$var wire 4 M ALUControlE [3:0] $end
$var wire 1 K ALUSrcE $end
$var wire 1 H BranchE $end
$var wire 32 N Imm_Ext_E [31:0] $end
$var wire 1 B MemWriteE $end
$var wire 32 O PCE [31:0] $end
$var wire 32 P PCPlus4E [31:0] $end
$var wire 32 Q PredictedPCE [31:0] $end
$var wire 32 R RD1_E [31:0] $end
$var wire 32 S RD2_E [31:0] $end
$var wire 5 T RD_E [4:0] $end
$var wire 5 U RS1_E [4:0] $end
$var wire 5 V RS2_E [4:0] $end
$var wire 1 / RegWriteE $end
$var wire 1 , ResultSrcE $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 32 W ResultW [31:0] $end
$var wire 1 X ResultSrcD $end
$var wire 1 - RegWriteW $end
$var wire 1 Y RegWriteD $end
$var wire 5 Z RDW [4:0] $end
$var wire 32 [ RD2_D [31:0] $end
$var wire 32 \ RD1_D [31:0] $end
$var wire 1 8 PredictionD $end
$var wire 32 ] PCPlus4D [31:0] $end
$var wire 32 ^ PCD [31:0] $end
$var wire 1 _ MemWriteD $end
$var wire 32 ` InstrD [31:0] $end
$var wire 32 a Imm_Ext_D [31:0] $end
$var wire 2 b ImmSrcD [1:0] $end
$var wire 1 c BranchD $end
$var wire 1 d ALUSrcD $end
$var wire 4 e ALUControlD [3:0] $end
$var reg 4 f ALUControlD_r [3:0] $end
$var reg 1 K ALUSrcD_r $end
$var reg 1 H BranchD_r $end
$var reg 1 G FlushE $end
$var reg 32 g Imm_Ext_D_r [31:0] $end
$var reg 1 h MemWriteD_r $end
$var reg 32 i PCD_r [31:0] $end
$var reg 32 j PCPlus4D_r [31:0] $end
$var reg 32 k RD1_D_r [31:0] $end
$var reg 32 l RD2_D_r [31:0] $end
$var reg 5 m RD_D_r [4:0] $end
$var reg 5 n RS1_D_r [4:0] $end
$var reg 5 o RS2_D_r [4:0] $end
$var reg 1 p RegWriteD_r $end
$var reg 1 q ResultSrcD_r $end
$scope module control $end
$var wire 7 r Op [6:0] $end
$var wire 3 s funct3 [2:0] $end
$var wire 7 t funct7 [6:0] $end
$var wire 1 X ResultSrc $end
$var wire 1 Y RegWrite $end
$var wire 1 _ MemWrite $end
$var wire 2 u ImmSrc [1:0] $end
$var wire 1 c Branch $end
$var wire 1 d ALUSrc $end
$var wire 2 v ALUOp [1:0] $end
$var wire 4 w ALUControl [3:0] $end
$scope module ALU_Decoder $end
$var wire 3 x funct3 [2:0] $end
$var wire 7 y funct7 [6:0] $end
$var wire 7 z op [6:0] $end
$var wire 2 { ALUOp [1:0] $end
$var wire 4 | ALUControl [3:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 } Op [6:0] $end
$var wire 1 X ResultSrc $end
$var wire 1 Y RegWrite $end
$var wire 1 _ MemWrite $end
$var wire 2 ~ ImmSrc [1:0] $end
$var wire 1 c Branch $end
$var wire 1 d ALUSrc $end
$var wire 2 !" ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module extension $end
$var wire 2 "" ImmSrc [1:0] $end
$var wire 32 #" In [31:0] $end
$var reg 32 $" Imm_Ext [31:0] $end
$upscope $end
$scope module rf $end
$var wire 5 %" A1 [4:0] $end
$var wire 5 &" A2 [4:0] $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 1 - WE3 $end
$var wire 32 '" WD3 [31:0] $end
$var wire 32 (" RD2 [31:0] $end
$var wire 32 )" RD1 [31:0] $end
$var wire 5 *" A3 [4:0] $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 4 +" ALUControlE [3:0] $end
$var wire 1 K ALUSrcE $end
$var wire 1 H BranchE $end
$var wire 1 ," FlushE $end
$var wire 32 -" Imm_Ext_E [31:0] $end
$var wire 1 B MemWriteE $end
$var wire 1 A MemWriteM $end
$var wire 1 ." Mispredicted $end
$var wire 32 /" PCE [31:0] $end
$var wire 32 0" PCPlus4E [31:0] $end
$var wire 32 1" PCPlus4M [31:0] $end
$var wire 1 : PCSrcE $end
$var wire 32 2" PCTargetE [31:0] $end
$var wire 32 3" PredictedPCE_E [31:0] $end
$var wire 1 4" PredictionE $end
$var wire 32 5" RD1_E [31:0] $end
$var wire 32 6" RD2_E [31:0] $end
$var wire 5 7" RD_E [4:0] $end
$var wire 5 8" RD_M [4:0] $end
$var wire 1 / RegWriteE $end
$var wire 1 . RegWriteM $end
$var wire 1 , ResultSrcE $end
$var wire 1 + ResultSrcM $end
$var wire 1 9" UseBranchALU $end
$var wire 32 :" WriteDataM [31:0] $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 1 ;" Zero_Branch $end
$var wire 1 <" ZeroE $end
$var wire 32 =" Src_B_interim [31:0] $end
$var wire 32 >" Src_B [31:0] $end
$var wire 32 ?" Src_A [31:0] $end
$var wire 32 @" ResultW [31:0] $end
$var wire 2 A" ForwardB_E [1:0] $end
$var wire 2 B" ForwardA_E [1:0] $end
$var wire 32 C" ALU_Result_Main [31:0] $end
$var wire 32 D" ALU_Result_Branch [31:0] $end
$var wire 32 E" ALU_ResultM [31:0] $end
$var reg 1 F" MemWriteE_r $end
$var reg 32 G" PCPlus4E_r [31:0] $end
$var reg 32 H" RD2_E_r [31:0] $end
$var reg 5 I" RD_E_r [4:0] $end
$var reg 1 . RegWriteE_r $end
$var reg 1 J" ResultSrcE_r $end
$scope module alu_branch $end
$var wire 32 K" A [31:0] $end
$var wire 4 L" ALUControl [3:0] $end
$var wire 32 M" B [31:0] $end
$var wire 1 N" overflow_add $end
$var wire 1 O" overflow_sub $end
$var wire 32 P" sum [31:0] $end
$var wire 32 Q" sub [31:0] $end
$var wire 1 R" carry_sub $end
$var wire 1 S" carry_add $end
$var wire 1 ;" Zero $end
$var wire 32 T" Result [31:0] $end
$var wire 1 U" OverFlow $end
$var wire 1 V" Negative $end
$var wire 1 W" Carry $end
$upscope $end
$scope module alu_main $end
$var wire 4 X" ALUControl [3:0] $end
$var wire 1 Y" overflow_add $end
$var wire 1 Z" overflow_sub $end
$var wire 32 [" sum [31:0] $end
$var wire 32 \" sub [31:0] $end
$var wire 1 ]" carry_sub $end
$var wire 1 ^" carry_add $end
$var wire 1 <" Zero $end
$var wire 32 _" Result [31:0] $end
$var wire 1 `" OverFlow $end
$var wire 1 a" Negative $end
$var wire 1 b" Carry $end
$var wire 32 c" B [31:0] $end
$var wire 32 d" A [31:0] $end
$upscope $end
$scope module alu_src_mux $end
$var wire 32 e" b [31:0] $end
$var wire 1 K s $end
$var wire 32 f" c [31:0] $end
$var wire 32 g" a [31:0] $end
$upscope $end
$scope module srca_mux $end
$var wire 32 h" a [31:0] $end
$var wire 32 i" c [31:0] $end
$var wire 2 j" s [1:0] $end
$var wire 32 k" d [31:0] $end
$var wire 32 l" b [31:0] $end
$upscope $end
$scope module srcb_mux $end
$var wire 32 m" a [31:0] $end
$var wire 32 n" c [31:0] $end
$var wire 2 o" s [1:0] $end
$var wire 32 p" d [31:0] $end
$var wire 32 q" b [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 1 r" FlushE $end
$var wire 32 s" PCF [31:0] $end
$var wire 1 : PCSrcE $end
$var wire 32 t" PCTargetE [31:0] $end
$var wire 32 u" PredictedPCE [31:0] $end
$var wire 1 v" Prediction $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 32 w" PC_F [31:0] $end
$var wire 32 x" PCPlus4F [31:0] $end
$var wire 32 y" PCPlus4D [31:0] $end
$var wire 32 z" PCD [31:0] $end
$var wire 32 {" InstrF [31:0] $end
$var wire 32 |" InstrD [31:0] $end
$var reg 4 }" BHT_index [3:0] $end
$var reg 32 ~" InstrF_reg [31:0] $end
$var reg 32 !# PCF_reg [31:0] $end
$var reg 32 "# PCPlus4F_reg [31:0] $end
$var reg 32 ## PredictedPCE_reg [31:0] $end
$var reg 1 8 PredictionF $end
$scope module IMEM $end
$var wire 32 $# A [31:0] $end
$var wire 1 & rst $end
$var wire 32 %# RD [31:0] $end
$upscope $end
$scope module PC_MUX $end
$var wire 32 &# b [31:0] $end
$var wire 1 v" s $end
$var wire 32 '# c [31:0] $end
$var wire 32 (# a [31:0] $end
$upscope $end
$scope module PC_adder $end
$var wire 32 )# a [31:0] $end
$var wire 32 *# b [31:0] $end
$var wire 32 +# c [31:0] $end
$upscope $end
$upscope $end
$scope module Forwarding_block $end
$var wire 5 ,# RD_M [4:0] $end
$var wire 1 . RegWriteM $end
$var wire 5 -# Rs1_E [4:0] $end
$var wire 5 .# Rs2_E [4:0] $end
$var wire 1 & rst $end
$var wire 1 - RegWriteW $end
$var wire 5 /# RD_W [4:0] $end
$var wire 2 0# ForwardBE [1:0] $end
$var wire 2 1# ForwardAE [1:0] $end
$upscope $end
$scope module Memory $end
$var wire 32 2# ALU_ResultM [31:0] $end
$var wire 32 3# ALU_ResultW [31:0] $end
$var wire 1 A MemWriteM $end
$var wire 32 4# PCPlus4M [31:0] $end
$var wire 32 5# PCPlus4W [31:0] $end
$var wire 5 6# RD_M [4:0] $end
$var wire 5 7# RD_W [4:0] $end
$var wire 32 8# ReadDataW [31:0] $end
$var wire 1 . RegWriteM $end
$var wire 1 - RegWriteW $end
$var wire 1 + ResultSrcM $end
$var wire 1 * ResultSrcW $end
$var wire 32 9# WriteDataM [31:0] $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 32 :# ReadDataM [31:0] $end
$var reg 32 ;# ALU_ResultM_r [31:0] $end
$var reg 32 <# PCPlus4M_r [31:0] $end
$var reg 5 =# RD_M_r [4:0] $end
$var reg 32 ># ReadDataM_r [31:0] $end
$var reg 1 - RegWriteM_r $end
$var reg 1 * ResultSrcM_r $end
$scope module dmem $end
$var wire 32 ?# A [31:0] $end
$var wire 32 @# WD [31:0] $end
$var wire 1 A WE $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 32 A# RD [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 B# ALU_ResultW [31:0] $end
$var wire 32 C# PCPlus4W [31:0] $end
$var wire 32 D# ReadDataW [31:0] $end
$var wire 1 * ResultSrcW $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 32 E# ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 F# a [31:0] $end
$var wire 32 G# b [31:0] $end
$var wire 1 * s $end
$var wire 32 H# c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
b0 <#
b0 ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b100 +#
b100 *#
b0 )#
b100 (#
b0x00 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
bz }"
b0 |"
b0 {"
b0 z"
b0 y"
b100 x"
b0x00 w"
zv"
b0x00 u"
b0 t"
bz s"
zr"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
0b"
0a"
0`"
b0 _"
0^"
0]"
b0 \"
b0 ["
0Z"
0Y"
b0 X"
0W"
0V"
0U"
b0 T"
0S"
0R"
b0 Q"
b0 P"
0O"
0N"
b0 M"
b0 L"
b0 K"
0J"
b0 I"
b0 H"
b0 G"
0F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
1<"
1;"
b0 :"
09"
b0 8"
b0 7"
b0 6"
b0 5"
z4"
bz 3"
b0 2"
b0 1"
b0 0"
b0 /"
x."
b0 -"
x,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
0q
0p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
0h
b0 g
b0 f
b0 e
0d
0c
b0 b
b0 a
b0 `
0_
b0 ^
b0 ]
b0 \
b0 [
b0 Z
0Y
0X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
b0x00 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
b0 J
b0 I
0H
0G
b0 F
b0 E
b0 D
b0 C
0B
0A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
0:
b0 9
x8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
0/
0.
0-
0,
0+
0*
b0 )
b0 (
b0x00 '
0&
1%
bx $
z#
z"
bz !
$end
#50
0%
#100
1%
#150
0%
#200
b10100000000000010010011 {"
b10100000000000010010011 %#
1&
1%
#250
0%
#300
1Y
1d
bx [
bx ("
bx {"
bx %#
b101 &"
b10011 r
b10011 z
b10011 }
b101 a
b101 $"
b100 >
b100 ]
b100 y"
b0x00 @
b0x00 ^
b0x00 z"
bx w"
bx '#
bx '
bx Q
bx u"
b10100000000000010010011 C
b10100000000000010010011 `
b10100000000000010010011 #"
b10100000000000010010011 |"
b0x00 ##
b100 "#
bx x"
bx (#
bx +#
b0x00 !#
b0x00 $#
b0x00 )#
b10100000000000010010011 ~"
1%
#350
0%
#400
bx :#
bx A#
xU"
b101 J
b101 E"
b101 i"
b101 n"
b101 2#
b101 ?#
bx e
bx w
bx |
xN"
0<"
b101 C"
b101 _"
xY
xd
xV"
b11111111111111111111111111111011 \"
1]"
b101 ["
bx \
bx )"
bx b
bx u
bx ~
bx ""
x_
xX
xc
bx v
bx {
bx !"
xW"
x;"
bx 9
bx 2"
bx t"
bx &#
bx D"
bx T"
b101 >"
b101 c"
b101 f"
bx &"
bx %"
bx t
bx y
bx s
bx x
bx r
bx z
bx }
b0 a
b0 $"
xS"
bx P"
bx Q"
xR"
bx ="
bx g"
bx p"
bx >
bx ]
bx y"
bx C
bx `
bx #"
bx |"
bz @
bz ^
bz z"
b101 1
b101 V
b101 o
b101 .#
b100 =
b100 P
b100 0"
b100 j
b0x00 ?
b0x00 O
b0x00 i
b0x00 /"
b0x00 K"
b1 4
b1 T
b1 7"
b1 m
b101 D
b101 N
b101 g
b101 -"
b101 M"
b101 e"
bx 6
bx S
bx l
bx 6"
bx m"
1K
1/
1p
bx ##
bx "#
bx ~"
bz !#
bz $#
bz )#
1%
#450
0%
#500
x`"
xZ"
xY"
bx0 F
bx0 B"
bx0 j"
bx0 1#
bx0 E
bx0 A"
bx0 o"
bx0 0#
xO"
bx \"
x]"
bx ["
x^"
x:
xa"
bx @
bx ^
bx z"
bx >"
bx c"
bx f"
bx ?"
bx d"
bx k"
x<"
bx C"
bx _"
xb"
bx J
bx E"
bx i"
bx n"
bx 2#
bx ?#
b101 )
b101 W
b101 '"
b101 @"
b101 l"
b101 q"
b101 E#
b101 H#
bx !#
bx $#
bx )#
bx 1
bx V
bx o
bx .#
bx 2
bx U
bx n
bx -#
bx =
bx P
bx 0"
bx j
bz ?
bz O
bz i
bz /"
bz K"
bx 4
bx T
bx 7"
bx m
b0 D
b0 N
b0 g
b0 -"
b0 M"
b0 e"
bx 7
bx R
bx k
bx 5"
bx h"
bx L
bx M
bx f
bx +"
bx X"
x9"
xH
x,
xq
xB
xh
xK
x/
xp
bx (
bx :"
bx 9#
bx @#
bx H"
b100 <
b100 1"
b100 4#
b100 G"
b1 3
b1 8"
b1 I"
b1 ,#
b1 6#
1.
bx 0
bx 8#
bx >#
bx D#
bx G#
b101 I
b101 3#
b101 ;#
b101 B#
b101 F#
1%
#550
0%
#600
bx E
bx A"
bx o"
bx 0#
bx F
bx B"
bx j"
bx 1#
bx )
bx W
bx '"
bx @"
bx l"
bx q"
bx E#
bx H#
bz @
bz ^
bz z"
bx I
bx 3#
bx ;#
bx B#
bx F#
b100 ;
b100 5#
b100 C#
b100 <#
b1 5
b1 Z
b1 *"
b1 /#
b1 7#
b1 =#
1-
bx <
bx 1"
bx 4#
bx G"
bx 3
bx 8"
bx I"
bx ,#
bx 6#
x+
xJ"
xA
xF"
x.
bx ?
bx O
bx i
bx /"
bx K"
bz !#
bz $#
bz )#
1%
#650
0%
#700
bx @
bx ^
bx z"
bx !#
bx $#
bx )#
bz ?
bz O
bz i
bz /"
bz K"
bx ;
bx 5#
bx C#
bx <#
bx 5
bx Z
bx *"
bx /#
bx 7#
bx =#
x*
x-
1%
#750
0%
#800
bz @
bz ^
bz z"
bx ?
bx O
bx i
bx /"
bx K"
bz !#
bz $#
bz )#
1%
#850
0%
#900
bx @
bx ^
bx z"
bx !#
bx $#
bx )#
bz ?
bz O
bz i
bz /"
bz K"
1%
#950
0%
#1000
bz @
bz ^
bz z"
bx ?
bx O
bx i
bx /"
bx K"
bz !#
bz $#
bz )#
1%
#1050
0%
#1100
bx @
bx ^
bx z"
bx !#
bx $#
bx )#
bz ?
bz O
bz i
bz /"
bz K"
1%
#1150
0%
#1200
bz @
bz ^
bz z"
bx ?
bx O
bx i
bx /"
bx K"
bz !#
bz $#
bz )#
1%
